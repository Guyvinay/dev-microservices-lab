spring:
  # Liquibase properties
  liquibase:
    enabled: true
    change-log: classpath:/db/changelog/dev-auth.changelog-master.xml
    contexts: "!test"
#    liquibase-schema: public
#    database-change-log-table: DATABASECHANGELOG
#    database-change-log-lock-table: DATABASECHANGELOGLOCK

  kafka:
    bootstrap-servers: localhost:9092
    consumer:
      group-id: my-group
      auto-offset-reset: earliest
    producer:
      retries: 3
      acks: all
      properties:
        linger.ms: 5
        enable.idempotence: true

  # Validate schema against hibernate models
  jpa:
    open-in-view: false
    hibernate:
      ddl-auto: none #create | update | validate | none
#      naming.physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
    properties.org.hibernate.envers.store_data_at_delete: true

  security:
    oauth2:
      client:
        registration:
          github:
            client-id: ${GITHUB_CLIENT_ID}
            client-secret: ${GITHUB_CLIENT_SECRET}
            scope: read:user, user:email
            redirect-uri: "{baseUrl}/login/oauth2/code/github"
            authorization-grant-type: authorization_code
            client-name: GitHub
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            scope: profile, email
            redirect-uri: "{baseUrl}/login/oauth2/code/google"
            authorization-grant-type: authorization_code
            client-name: Google
        provider:
          github:
            authorization-uri: https://github.com/login/oauth/authorize
            token-uri: https://github.com/login/oauth/access_token
            user-info-uri: https://api.github.com/user
          google:
            authorization-uri: https://accounts.google.com/o/oauth2/auth
            token-uri: https://oauth2.googleapis.com/token
            user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo

  redis:
    host: localhost
    port: 6379
    #    password: ${REDIS_PASSWORD:}    # use secrets manager / env var
    database: 100
    lettuce:
      pool:
        max-active: 20
        max-idle: 10
        min-idle: 2
  cache:
    type: redis

app:
  redis:
    key-prefix: dev-auth # isolates keys across services
    cache:
      default-ttl-minutes: 15   # default TTL if not overridden


server:
  port: 8000
  address: 0.0.0.0
  canonical.url: http://localhost:8000/dev-auth
  servlet.context-path: /dev-auth
  name: localhost

security:
  jwt:
    secret: mySecretKeyForJwtToken
    expiration: 3600000 # 1 hour in milliseconds

elastic:
  index:
    private: es_private_message_index
    group: es_group_message_index

kafka:
  bootstrap-servers: localhost:9092

#logging:
#  level:
#    org.springframework.security.saml2: TRACE
#    org.springframework.security: TRACE
#    org.opensaml: DEBUG